*tracebundler.nvim.txt*

==============================================================================
Lua module: tracebundler                      *tracebundler.nvim-tracebundler*

execute({f}, {opts})                                  *tracebundler.execute()*
  Executes function and returns as a bundled lua chunk string.
  The chunk includes executed files.

  Parameters: ~
    {f} (function) trace target (current limitation: cannot include upvalues)
    {opts} (table|nil) |tracebundler.nvim-opts|

  Return: ~
    (string) a lua chunk

bundle({traces}, {bundle_opts})                        *tracebundler.bundle()*
  Returns as a bundled lua chunk string.
  Mainly use in |tracebundler.nvim-trace-opts| callback.

  Parameters: ~
    {traces} (table) trace info that is callback argument.
    {bundle_opts} (table|nil) |tracebundler.nvim-bundle-opts|

  Return: ~
    (string) a lua chunk

==============================================================================
TYPES                                                *tracebundler.nvim-TYPES*

options                                               *tracebundler.nvim-opts*

- {bundle} (table): |tracebundler.nvim-bundle-opts|
- {trace} (table): |tracebundler.nvim-trace-opts|

bundle options                                 *tracebundler.nvim-bundle-opts*

- {enabled_file_loader} (boolean): if true, chunk supports dofile, loadfile.
    default: false
- {traced_marker} (string): if not empty, adds to traced line as comment.
    default: " TRACED"

trace options                                   *tracebundler.nvim-trace-opts*

- {callback} (function): called after every trace.
    default: `function(traces) end`
- {path_filter} (function): if return true, the chunk includes the file.
    default: `function(file_path) return true end`

==============================================================================
EXAMPLES                                          *tracebundler.nvim-EXAMPLES*

>
  local tracebundler = require("tracebundler")
  local bundled = tracebundler.execute(function()
    return require("tracebundler.testdata.example").entry()
  end, {
    trace = {
      path_filter = function(path)
        local matched = path:match("tracebundler")
        return matched and not path:match("ignored")
      end,
    },
    bundle = {
      enalbed_file_loader = false,
      traced_marker = " TRACED",
    },
  })

  local bufnr = vim.api.nvim_create_buf(false, true)
  local lines = vim.split(bundled, "\n", true)
  vim.api.nvim_buf_set_lines(bufnr, 0, -1, false, lines)
  vim.bo[bufnr].filetype = "lua"
  vim.cmd([[buffer ]] .. bufnr)
<

The following is the bundled chunk.

>
  local _tracebundler_require = {}
  local _tracebundler_loaded = {}

  local global_require = require
  local require = function(name)
    if not name then
      return global_require(name)
    end
    local loaded = _tracebundler_loaded[name]
    if loaded then
      return loaded
    end
    local f = _tracebundler_require[name:gsub("/", "%.")]
    if not f then
      return global_require(name)
    end
    local result = f(name)
    _tracebundler_loaded[name] = result or package.loaded[name] or true
    return _tracebundler_loaded[name]
  end

  _tracebundler_require["tracebundler.testdata.example.init"] = function(...)
    local M = {} -- TRACED

    function M.entry() -- TRACED
      local used = require("tracebundler.testdata.example.used").new() -- TRACED
      require("tracebundler.testdata.example.ignored").start() -- TRACED
      return used -- TRACED
    end -- TRACED

    return M -- TRACED
  end
  _tracebundler_require["tracebundler.testdata.example"] = _tracebundler_require["tracebundler.testdata.example.init"]

  _tracebundler_require["tracebundler.testdata.example.used"] = function(...)
    local M = {} -- TRACED

    function M.new() -- TRACED
      if false then -- TRACED
        return {}
      end
      return {} -- TRACED
    end -- TRACED

    function M.unused() -- TRACED
      return {}
    end -- TRACED

    return M -- TRACED
  end

  local _tracebundler_entrypoint = function()
    return require("tracebundler.testdata.example").entry() -- TRACED
  end
  return _tracebundler_entrypoint()
<

==============================================================================
vim:tw=78:ts=8:ft=help
