*tracebundler.nvim.txt*

==============================================================================
Lua module: tracebundler                      *tracebundler.nvim-tracebundler*

execute({f}, {opts})                                  *tracebundler.execute()*
  Executes function and returns as a bundled lua chunk string.
  The chunk includes executed files.
  Limitation:
  - `f` cannot include upvalues.
  - `f` must not be one line closure: `function() require('something') end`

  Parameters: ~
    {f} (fun():any) trace target
    {opts} (TracebundlerOption?) |TracebundlerOption|

  Return: ~
    (string) a lua chunk |tracebundler.nvim-chunk-limitation|

bundle({traces}, {bundle_opts})                        *tracebundler.bundle()*
  Returns as a bundled lua chunk string.
  Mainly use in |TracebundlerTraceOption| callback.

  Parameters: ~
    {traces} (TracebundlerTraces) trace info that is callback argument.
    {bundle_opts} (TracebundlerBundleOption?) |TracebundlerBundleOption|

  Return: ~
    (string) a lua chunk |tracebundler.nvim-chunk-limitation|

==============================================================================
STRUCTURE                                        *tracebundler.nvim-STRUCTURE*

TracebundlerOption                                        *TracebundlerOption*

- {bundle} (TracebundlerBundleOption)
- {trace} (TracebundlerTraceOption)

TracebundlerBundleOption                            *TracebundlerBundleOption*

- {enabled_file_loader} (boolean?) if true, chunk supports dofile, loadfile. default: false
- {return_table} (boolean?) if true, chunk returns {modules = {modules}, execute = {f}}, if false, chunk returns {f}(). default: false
- {traced_marker} (string?) if not empty, adds to traced line as comment. default: " TRACED"

TracebundlerTraceOption                              *TracebundlerTraceOption*

- {callback} (fun(traces:TracebundlerTraces)?) called after every trace. default: `function(traces) end`
- {path_filter} ((fun(path:string):boolean)?) if return true, the chunk includes the file. default: `function(file_path) return true end`

TracebundlerTraces                                        *TracebundlerTraces*


==============================================================================
LIMITATION                                      *tracebundler.nvim-LIMITATION*

chunk limitation                          *tracebundler.nvim-chunk-limitation*

- Bundled functions are not called if `require()` is called by Ex command.
- Bundled `require()` is not influenced by `package.loaded[key] = nil`.

==============================================================================
EXAMPLES                                          *tracebundler.nvim-EXAMPLES*

>lua
  local bundled = require("tracebundler").execute(function()
    return require("tracebundler.test.data.example").entry()
  end, {
    trace = {
      path_filter = function(path)
        local matched = path:match("tracebundler")
        return matched and not path:match("ignored")
      end,
    },
    bundle = {
      enalbed_file_loader = false,
      traced_marker = " TRACED",
    },
  })

  local bufnr = vim.api.nvim_create_buf(false, true)
  local lines = vim.split(bundled, "\n", { plain = true })
  vim.api.nvim_buf_set_lines(bufnr, 0, -1, false, lines)
  vim.bo[bufnr].filetype = "lua"
  vim.cmd.buffer(bufnr)
<

The following is the bundled chunk.

>lua
  local _tracebundler_require = {}
  local _tracebundler_loaded = {}

  local global_require = require
  local require = function(name)
    if not name then
      return global_require(name)
    end
    local loaded = _tracebundler_loaded[name]
    if loaded then
      return loaded
    end
    local f = _tracebundler_require[name:gsub("/", "%.")]
    if not f then
      return global_require(name)
    end
    local result = f(name)
    _tracebundler_loaded[name] = result or package.loaded[name] or true
    return _tracebundler_loaded[name]
  end

  local _tracebundler_original_vim = vim
  local vim = setmetatable({}, {
    __index = function(_, k)
      local v = rawget(require("vim.shared"), k)
      if v then
        return v
      end
      return _tracebundler_original_vim[k]
    end,
  })

  _tracebundler_require["tracebundler.test.data.example.init"] = function(...)
    local M = {} -- TRACED

    function M.entry() -- TRACED
      local used = require("tracebundler.test.data.example.used").new() -- TRACED
      require("tracebundler.test.data.example.ignored").start() -- TRACED
      return used -- TRACED
    end -- TRACED

    return M -- TRACED
  end
  _tracebundler_require["tracebundler.test.data.example"] = _tracebundler_require["tracebundler.test.data.example.init"]

  _tracebundler_require["tracebundler.test.data.example.used"] = function(...)
    local M = {} -- TRACED

    function M.new() -- TRACED
      if false then -- TRACED
        return {}
      end
      return {} -- TRACED
    end -- TRACED

    function M.unused() -- TRACED
      return {}
    end -- TRACED

    return M -- TRACED
  end

  local _tracebundler_entrypoint = function()
    return require("tracebundler.test.data.example").entry() -- TRACED
  end
  local _tracebundler = {
    execute = _tracebundler_entrypoint,
    modules = _tracebundler_require,
  }
  return _tracebundler.execute()
<

==============================================================================
vim:tw=78:ts=8:ft=help
