*tracebundler.nvim.txt*

==============================================================================
Lua module: tracebundler                      *tracebundler.nvim-tracebundler*

execute({f}, {opts})                                  *tracebundler.execute()*
  Executes function and returns as a bundled lua chunk string.
  The chunk includes executed files.

  Parameters: ~
    {f} (function) trace target (current limitation: cannot include upvalues)
    {opts} (table|nil) |tracebundler.nvim-opts|

  Return: ~
    (string) a lua chunk

==============================================================================
TYPES                                                *tracebundler.nvim-TYPES*

options                                               *tracebundler.nvim-opts*

- {path_filter} (function | nil): if return true, the chunk includes the file.
    default: `function(file_path) return true end`

==============================================================================
EXAMPLES                                          *tracebundler.nvim-EXAMPLES*

>
  local tracebundler = require("tracebundler")
  local bundled = tracebundler.execute(function()
    return require("tracebundler.example").entry()
  end, {
    path_filter = function(path)
      return not path:match("tracebundler/example/ignored")
    end,
  })

  local bufnr = vim.api.nvim_create_buf(false, true)
  local lines = vim.split(bundled, "\n", true)
  vim.api.nvim_buf_set_lines(bufnr, 0, -1, false, lines)
  vim.bo[bufnr].filetype = "lua"
  vim.cmd([[vsplit | buffer ]] .. bufnr)

  -- The following is the bundled chunk:

  -- local _tracebundler_require = {}
  --
  -- local global_require = require
  -- local require = function(name)
  --   local f = _tracebundler_require[name]
  --   if not f then
  --     return global_require(name)
  --   end
  --   return f(name)
  -- end
  --
  -- _tracebundler_require[""] = function(...)
  --     return require("tracebundler.example").entry()
  -- end
  --
  -- _tracebundler_require["tracebundler.example.init"] = function(...)
  --   local M = {}
  --
  --   function M.entry()
  --     local used = require("tracebundler.example.used").new()
  --     require("tracebundler.example.ignored").start()
  --     return used
  --   end
  --
  --   return M
  --
  -- end
  --
  -- _tracebundler_require["tracebundler.example"] = _tracebundler_require["tracebundler.example.init"]
  --
  -- _tracebundler_require["tracebundler.example.used"] = function(...)
  --   local M = {}
  --
  --   function M.new()
  --     return {}
  --   end
  --
  --   return M
  --
  -- end
  --
  -- return _tracebundler_require[""]("")
<

==============================================================================
vim:tw=78:ts=8:ft=help
